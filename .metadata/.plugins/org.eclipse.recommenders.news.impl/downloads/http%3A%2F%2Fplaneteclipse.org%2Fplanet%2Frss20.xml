<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Roxanne Joncas: Eclipse IoT @ Red Hat Summit</title>
	<guid isPermaLink="false">https://medium.com/p/74a326dab852</guid>
	<link>https://medium.com/@roxanne.iot/eclipse-iot-red-hat-summit-74a326dab852?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;In less than two weeks, we will be at the &lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;Red Hat Summit&lt;/a&gt; in Boston, MA.&lt;/p&gt;&lt;p&gt;We’re really excited! We will be involved in many aspects of the conference including the Red Hat IoT Partner Showcase, where we will be demoing something very cool! Stay tuned for the details.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/u/12c9446b8e55&quot;&gt;Benjamin Cabé&lt;/a&gt; will also be speaking at on May 2 @ 10 am during the Lightning Talks.&lt;/p&gt;&lt;p&gt;Plan to join this year’s &lt;a href=&quot;https://developers.redhat.com/blog/2017/04/12/perform-hands-on-real-world-iot-development-at-the-red-hat-summit-iot-codestarter/&quot;&gt;IoT CodeStarter&lt;/a&gt; starting on May 2 @ 6 pm to experience and use open source projects such as &lt;a href=&quot;https://www.eclipse.org/kura/&quot;&gt;Eclipse Kura&lt;/a&gt;, Eclipse Kura Wires and &lt;a href=&quot;http://eclipse.org/kapua&quot;&gt;Eclipse Kapua&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Stop by our demo station at the Red Hat IoT Partner Showcase to say hello!&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*D4zEc9byIlLSsVoSk8z7Sg.png&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=74a326dab852&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Apr 2017 15:31:55 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms – Day 6 – Custom Renderers</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28093</guid>
	<link>http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms is a framework to efficiently build form-based web UIs. These UIs allow end users to enter, modify, and view data and are usually embedded within a business application. JSON Forms eliminates the need to write HTML templates and Javascript for databinding by hand. It supports the creation of customizable forms by leveraging the capabilities of JSON and &lt;/span&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and providing a simple and declarative way of describing forms. Forms are then rendered with a UI framework, currently one that is based on AngularJS. If you would like to know more about JSON Forms, the &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms homepage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a good starting point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we wish to introduce the framework based on a real-world example application, a task tracker called “Make It happen”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 1&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we described the overall requirements, from day 2 to 5, we have created a fully working form for the entity “Task”. If you would like to follow this blog series please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, where we will announce every new blog post regarding JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far, on the previous days, we have created a fully functional form rendered in AngularJS, by simply using two schemata: a JSON Schema to define the underlying data and a UI Schema to specify the UI. JSON Forms provides a rendering component, which translates this two schemas into a AngularJS form, including data binding, validation, rule-based visibility, and so on. While this is very efficient, you may wonder what you should do if the form rendered by JSON Forms does not exactly look like what you expected. Let us have a look at the form we have so far:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-1.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28095&quot; height=&quot;188&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-1-300x188.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While the generic structure and the layout look pretty good, there are two controls, which could require some aesthetic improvement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First, the checkbox for “done” is very small, we would rather have something like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image09.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-28096&quot; height=&quot;41&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image09.png&quot; width=&quot;40&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second, the control for “rating” is just a plain number field, a rating would better be expressed by a control like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image02.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-28097&quot; height=&quot;32&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image02.png&quot; width=&quot;112&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both improvements can be addressed by customizing existing renderers or adding new custom renderers to JSON Forms. This use case is actually not special at all, it is anticipated and fully supported. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In JSON Forms a renderer is only responsible for displaying one particular UI element, like a control or a horizontal layout. JSON Forms ships with default renderers for all UI schema elements. The default renderers are meant as a starting point, and therefore, it is very likely that you will add new renderers and extend existing ones.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The good news is that you still do not have to implement the complete form manually. Rather, you just need to add some code for the customized part. That means you can iteratively extend the framework with custom renderers, while the complete form remains fully functional. Let us have a quick look at the architecture of the JSON Forms rendering component. In fact there is not only one renderer, there is at least one renderer per concept of the UI schema. Renderers are responsible for translating the information of the UI schema and the data schema into a running HTML UI.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;All those renderers are registered at a renderer factory (see following diagram). For every renderer, there is a “Tester”, which decides, whether a certain renderer should be responsible for rendering a certain UI element. This can depend on the type of the UI schema element (e.g. all controls), on the type of the referenced data property (e.g. a renderer for all String properties), or even on the name of the data property (e.g. only the attribute “rating”).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image00.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28098&quot; height=&quot;149&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image00-300x149.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This architecture allows you to register renders in an extremely flexible way. If there are no custom renderers, the default renderer will be used. Please note, that JSON Forms supports renderers written in JS5, JS6, and Typescript. In the following, we will use Typescript.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So let’s customize the styling of the default renderer for the “done” attribute by CSS styling and by adding a custom renderer for the rating attribute. Therefore, we start with a customization of the CSS of the sample application. By adding the following style you can change the size of the checkbox of the done attribute alone:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;CSS&quot;&gt;#properties_done {
  width:35px;
  height:35px;
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Second we need a tester for the custom rating renderer, which should only be applied for the rating property:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JavaScript&quot;&gt;.run(['RendererService', 'JSONFormsTesters', function(RendererService, Testers) {
        RendererService.register('rating-control', Testers.and(
            Testers.schemaPropertyName('rating')
        ), 10);
    }])
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can see, the tester references a renderer, so the next step is to implement it:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JavaScript&quot;&gt;.directive('ratingControl', function() {
    return {
        restrict: 'E',
        controller: ['BaseController', '$scope', function(BaseController, $scope) {
            var vm = this;
            BaseController.call(vm, $scope);
            vm.max = function() {
                if (vm.resolvedSchema.maximum !== undefined) {
                    return vm.resolvedSchema.maximum;
                } else {
                    return 5;
                }
            };
        }],
        controllerAs: 'vm',
        templateUrl: './renderer/rating.control.html'
    };
})
&lt;/pre&gt; 
&lt;pre&gt;&amp;lt;jsonforms-control&amp;gt;
 &amp;lt;uib-rating
 id=&quot;{{vm.id}}&quot;
 readonly=&quot;vm.uiSchema.readOnly&quot;
 ng-model=&quot;vm.resolvedData[vm.fragment]&quot;
 max=&quot;vm.max()&quot;&amp;gt;&amp;lt;/uib-rating&amp;gt;
 &amp;lt;/uib-rating&amp;gt;
&amp;lt;/jsonforms-control&amp;gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please see &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/customrenderer&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details about implementing your own custom renderer in either JS5, JS6, or Typescript. After adding our CSS customization and the custom renderer to our project, we can see the result embedded in our form:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image07.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28100&quot; height=&quot;195&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image07-300x195.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that the data schema and the UI schema do not have to be adapted at all. JSON Forms facilitates a strict separation between the definition of a form and its rendering. That enables you to not only adapt the look and feel of your UI, but also render the same UI schema in different ways.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in implementing your own renderer or if you miss any feature in JSON Forms, please &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/support&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. If you are interested in trying out JSON Forms, please refer to the &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/firstform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Getting-Started tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This tutorial explains how to set up JSON Forms in your project as well as how you can try out the first steps on your own. If you would like to follow this blog series, please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. We will announce every new blog post on JSON Forms there.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;List of all available days to date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;Day 0 and 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;Day 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot;&gt;Day 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot;&gt;Day 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=JSON+Forms+%26%238211%3B+Day+6+%26%238211%3B+Custom+Renderers&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&amp;amp;t=JSON+Forms+%26%238211%3B+Day+6+%26%238211%3B+Custom+Renderers&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angular/&quot; title=&quot;Angular Tag&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-forms/&quot; title=&quot;json forms Tag&quot;&gt;json forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angular/&quot; title=&quot;Angular Tag&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-forms/&quot; title=&quot;json forms Tag&quot;&gt;json forms&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 21 Apr 2017 09:28:58 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Technical Debt: How Do You Unfork a Fork?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1697</guid>
	<link>https://kichwacoders.com/2017/03/28/technical-debt-how-do-you-unfork-a-fork/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;filled_cirle_point_style_graph&quot; class=&quot; size-full wp-image-1906 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/filled_cirle_point_style_graph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how to fork that interesting open source project, it’s simple and handy to do. What’s not so easy to do is to merge back a fork that has over the years taken on a life of its own and for many reasons has diverged drastically from the original repo.&lt;/p&gt;
&lt;p&gt;This is a case study of an ongoing project we are doing with SWT XYGraph, a visualisation project that is now part of Eclipse Nebula. It is the story of a fork of SWT XYGraph maintained by Diamond Light Source, the UK’s national synchrotron. But mostly it is a story about the efforts to merge the fork, reduce technical debt, and work towards the goal of sharing software components for Science, a key goal of the Eclipse Science Working Group.&lt;span id=&quot;more-1697&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Know Your History&lt;/h2&gt;
&lt;p&gt;One of the first things in this project was to understand the history – spanning 8 years – of the fork.  We knew the Diamond fork was done before SWT XYGraph became part of Nebula and under the Eclipse Foundation umbrella. The fork was made in order to quickly add in a number of new features that required some fundamental architectural changes to the code base.&lt;/p&gt;
&lt;p&gt;However on looking through the history, we found there were more than just 2 forks involved. The original project had been developed as part of Control System Studio (CSS) from Oakridge National Labs. CSS had in turn been forked by Diamond and customised for the local facility. Even though SWT XYGraph had been contributed to the Eclipse Nebula project, the original repo and many, many forks were still out there: more than enough forks for a dinner party. I can’t explain it any further in words so will dump our illegible working diagram of it all here:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;forks&quot; class=&quot;alignnone size-large wp-image-1849&quot; height=&quot;1024&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/forks.jpg?w=768&amp;amp;h=1024&quot; width=&quot;768&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Patches were pulled across and merged across forks when it was straightforward to do so. But with so many forks, this was a case where git history really mattered. Anywhere the history was preserved it was straightforward to track the origins of a specific feature – much harder in the cases where the history was lost. Git history is important, always worth some effort to preserve.&lt;/p&gt;
&lt;h2&gt;Choose Your Approach Carefully&lt;/h2&gt;
&lt;p&gt;Deciding if it worthwhile to merge a big fork takes some consideration. The biggest question to ask is: Are the architectural changes fundamentally resolvable? (Not like Chromium’s fork of Webkit – &lt;a href=&quot;https://en.wikipedia.org/wiki/Blink_(web_engine)&quot; target=&quot;_blank&quot;&gt;Blink&lt;/a&gt;). If that is a yes, then it’s a case of trading off the long-term benefits for the short term pain. In this case, Diamond knew it was something they wanted to do, more a matter of timing and picking the correct approach.&lt;/p&gt;
&lt;p&gt;Together there seemed to be 2 main ways to tackle removing the fork that was part of a mature product in constant use at the scientific facility.&lt;/p&gt;
&lt;p&gt;Option 1: Create a branch and work in parallel to get the branch working with upstream version, then merge the branch.&lt;/p&gt;
&lt;p&gt;Option 2: Avoid a branch, but work to incrementally make the fork and upstream SWT XYGraph plug-ins identical, then make the switch over to the upstream version.&lt;/p&gt;
&lt;p&gt;Option 1 had been tried before without success; there were too many moving parts and it created too much overhead, and ironically another fork to maintain. So it was clear this time Option 2 would be the way forward.&lt;/p&gt;
&lt;h2&gt;Tools are Your Friend&lt;/h2&gt;
&lt;p&gt;The incremental merging of the two needed to be done in a deliberate, reproducible manner to make it easier to trace back any issues coming up. Here are the tools that were useful in doing this.&lt;/p&gt;
&lt;h3&gt;1. Git Diff&lt;/h3&gt;
&lt;p&gt;The first step was to get an idea of the scale of the divergence, both quantitatively and qualitatively.&lt;/p&gt;
&lt;p&gt;For quantity, a rough and ready measure was obtained by using git diff:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; title: ; notranslate&quot;&gt;$ git diff --shorstat &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt;
399 files changed, 15648 insertions(+), 15368 deletions(-)

$ git diff &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt; | wc -l
37874
&lt;/pre&gt;
&lt;h3&gt;2. Eclipse IDE’s JDT formatter&lt;/h3&gt;
&lt;p&gt;Next, we needed to remove diffs that were just down to formatting. For this using Eclipse IDE and the quick &amp;amp; easy formatting. Select “src” folder, choose Source menu -&amp;gt; Format. All code formatted to Eclipse standard in one go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;format_src_folder&quot; class=&quot;alignnone size-full wp-image-1880&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/format_src_folder.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Merge Tools&lt;/h3&gt;
&lt;p&gt;Then it was time to dive into the differences and group them into features, separating quick fixes from changes that broke APIs. For this we used the free and open &lt;a href=&quot;http://meldmerge.org/&quot; target=&quot;_blank&quot;&gt;meld&lt;/a&gt; on Linux.&lt;/p&gt;
&lt;h3&gt;3. EGit Goodness&lt;/h3&gt;
&lt;p&gt;Let’s say we found a line of code different in the fork. To work out where the feature had come from, we could use ‘&lt;a href=&quot;https://git-scm.com/docs/git-blame&quot; target=&quot;_blank&quot;&gt;git blame&lt;/a&gt;‘ but much nicer is the &lt;a href=&quot;http://www.vogella.com/tutorials/EclipseGit/article.html#see-git-information-line-by-line-aka-git-blame&quot; target=&quot;_blank&quot;&gt;eGit support in Eclipse IDE&lt;/a&gt;. Show annotations was regularly used to try to work out where that feature had come from, which fork it had been originally created on and then see if we could find any extra information such as bugzilla or JIRA tickets describing the feature. We were always grateful for code with good and helpful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;egit_annotations.png&quot; class=&quot;alignnone size-full wp-image-1888&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/egit_annotations1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Bug Tracking Tools&lt;/h3&gt;
&lt;p&gt;In this case we were using two different bug trackers: Bugzilla on the Eclipse Nebula side of things and JIRA on the Diamond side of things. As part of the merge, we were contributing lots and lots of distinct features to Nebula, we had a parent issue: &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513865&quot; target=&quot;_blank&quot;&gt;Bug 513865&lt;/a&gt; to which we linked all the underlying fixes and features, aiming to keep each one distinct and standalone. At the time of writing that meant 21 dependent bugs.&lt;/p&gt;
&lt;h3&gt;4. Gerrits &amp;amp; Pull Requests&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://git.eclipse.org/r/#/q/project:nebula/org.eclipse.nebula+owner:jonah%2540kichwacoders.com&quot; target=&quot;_blank&quot;&gt;Gerrits&lt;/a&gt; were created for each bug for Eclipse Nebula. &lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/pull/11&quot; target=&quot;_blank&quot;&gt;Pull requests&lt;/a&gt; were created for each change going to Diamond’s DAWN (over 50 to date). Each was reviewed before being committed back. In many cases we took the opportunity to tidy code up or enhance it with things like standalone examples that could be used to demonstrate the feature.&lt;/p&gt;
&lt;h3&gt;5. Github Built-in Graphs&lt;/h3&gt;
&lt;p&gt;It was also good to use the built in Github built in Graphs  (on any repository click on ‘Graphs’ tab), first to see other forks out in the wild (&lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/network/members&quot; target=&quot;_blank&quot;&gt;Members tab&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;members&quot; class=&quot;alignnone size-full wp-image-1834&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/members.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then the ‘Network’ tab to keep track of the relationship with those forks compared to the main Diamond fork:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;networkgraph&quot; class=&quot;alignnone size-full wp-image-1833&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/networkgraph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Much nicer than our hand-drawn effort from earlier, though in this case not all the code being dealt with was in Github.&lt;/p&gt;
&lt;h2&gt;Win/Win&lt;/h2&gt;
&lt;p&gt;The work is ongoing and we are getting to the tricky parts – the key reasons the forks were created in the first place – to make fundamental changes to the architecture. This will require some conversations to understand the best way forward. Already with the work that has been done, there has been mutual benefits: Diamond get new features and bug fixes developed in the open source and Eclipse Nebula get new features and bug fixes developed at Diamond Light Source. The &lt;a href=&quot;https://wiki.eclipse.org/Nebula/Releases/1.3.0/NaN&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; for Eclipse Nebula shows off screenshots of all the new features as a result of this merge.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Nebula_N&amp;amp;N_1.3_-_improved_mouse_cursors&quot; class=&quot;alignnone size-full wp-image-1839&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/nebula_nn_1-3_-_improved_mouse_cursors.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Going forward this paves the way for Diamond to not only get rid of duplicate maintenance of &amp;gt;30,000 lines of Java code (according to &lt;a href=&quot;https://github.com/AlDanial/cloc&quot; target=&quot;_blank&quot;&gt;cloc&lt;/a&gt;), but to contribute some significant features they have developed that integrate with SWT XYGraph. In doing so with the Eclipse Science Working Group it make a great environment to collaborate in open source and make advancements that benefit all involved.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1697/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1697/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1697&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 20 Apr 2017 13:13:45 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Mastering Eclipse CDT</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/DaIrbBFq_nw/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/DaIrbBFq_nw/</link>
	<description>Learn all about Eclipse CDT, a fully functional C &amp;amp; C++ IDE for the Eclipse platform in this month's newsletter.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/DaIrbBFq_nw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 20 Apr 2017 11:10:00 +0000</pubDate>
</item>
<item>
	<title>Dirk Fauth: Access OSGi Services via web interface</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7578</guid>
	<link>http://blog.vogella.com/2017/04/20/access-osgi-services-via-web-interface/</link>
	<description>&lt;p&gt;In this blog post I want to share a simple approach to make OSGi services available via web interface. I will show a simple approach that includes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embedding a &lt;a href=&quot;https://www.eclipse.org/jetty/&quot; target=&quot;_blank&quot;&gt;Jetty&lt;/a&gt;  Webserver in an OSGi application&lt;/li&gt;
&lt;li&gt;Registering a Servlet via OSGi DS using the HTTP Whiteboard specification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will only cover this simple scenario here and will not cover accessing OSGi services via REST interface. If you are interested in that you might want to look at the &lt;a href=&quot;https://github.com/hstaudacher/osgi-jax-rs-connector&quot; target=&quot;_blank&quot;&gt;OSGi – JAX-RS Connector&lt;/a&gt;, which looks also very nice. Maybe I will look at this in another blog post. For now I will focus on embedding a Jetty Server and deploy some resources.&lt;/p&gt;
&lt;p&gt;I will skip the introduction on OSGi DS and extend the examples from my &lt;a href=&quot;http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Getting Started with OSGi Declarative Services&lt;/a&gt; blog. It is easier to follow this post when done the other tutorial first, but it is not required if you adapt the contents here to your environment.&lt;/p&gt;
&lt;p&gt;As a first step create a new project &lt;em&gt;org.fipro.inverter.http. &lt;/em&gt;In this project we will add the resources created in this tutorial. If you use PDE you should create a new &lt;em&gt;Plug-in Project&lt;/em&gt;, with Bndtools create a new &lt;em&gt;Bnd OSGi Project&lt;/em&gt; using the &lt;em&gt;Component Development&lt;/em&gt; template.&lt;/p&gt;
&lt;h2&gt;PDE – Target Platform&lt;/h2&gt;
&lt;p&gt;In PDE it is best practice to create a Target Definition so the work is based on a specific set of bundles and we don’t need to install bundles in our IDE. Follow these steps to create a Target Definition for this tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new target definition
&lt;ul&gt;
&lt;li&gt;Right click on project &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; → New → Other… → Plug-in Development → Target Definition&lt;/li&gt;
&lt;li&gt;Set the filename to &lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;i&gt;.target&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Initialize the target definition with: &lt;i&gt;Nothing&lt;/i&gt;&lt;i&gt;: Start &lt;/i&gt;&lt;i&gt;with&lt;/i&gt;&lt;i&gt; an &lt;/i&gt;&lt;i&gt;empty&lt;/i&gt; &lt;i&gt;target&lt;/i&gt; &lt;i&gt;definition&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add a new &lt;em&gt;Software Site&lt;/em&gt; in the opened Target Definition Editor by clicking &lt;em&gt;Add…&lt;/em&gt; in the &lt;em&gt;Locations&lt;/em&gt; section
&lt;ul&gt;
&lt;li&gt;Select &lt;em&gt;Software Site&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Software Site &lt;em&gt;http://download.eclipse.org/releases/oxygen&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Disable &lt;em&gt;Group by Category&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select the following entries
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Equinox Core SDK&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Equinox Compendium SDK&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jetty Http Server Feature&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optional: Add a new Software Site to include JUnit to the Target Definition (only needed in case you followed all previous tutorials on OSGi DS or want to integrate JUnit tests for your services)
&lt;ul&gt;
&lt;li&gt;Software Site &lt;em&gt;http://download.eclipse.org/tools/orbit/R-builds/R20170307180635/repository&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;JUnit Testing Framework&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save your work and activate the target platform by clicking &lt;em&gt;Set as Target Platform&lt;/em&gt; in the upper right corner of the Target Definition Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bndtools – Repository&lt;/h2&gt;
&lt;p&gt;Using Bndtools is different as you already know if you followed my previous blog posts. To be also able to follow this blog post by using Bndtools, I will describe the necessary steps here.&lt;/p&gt;
&lt;p&gt;We will use Apache Felix in combination with Bndtools instead of Equinox. This way we don’t need to modify the predefined repository and can start without further actions. The needed Apache Felix bundles are already available.&lt;/p&gt;
&lt;h2&gt;PDE – Prepare project dependencies&lt;/h2&gt;
&lt;p&gt;We will prepare the project dependencies in advance so it is easier to copy and paste the code samples to the project. Within the Eclipse IDE the Quick Fixes would also support adding the dependencies afterwards of course.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;MANIFEST.MF&lt;/em&gt; file of the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project and switch to the &lt;em&gt;Dependencies&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following two dependencies on the &lt;em&gt;Imported Packages&lt;/em&gt; side:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;javax.servlet (3.1.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;javax.servlet.http (3.1.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter (1.0.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.component.annotations (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mark &lt;em&gt;org.osgi.service.component.annotations&lt;/em&gt; as &lt;em&gt;Optional&lt;/em&gt; via &lt;em&gt;Properties…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the upper version boundaries to the &lt;em&gt;Import-Package&lt;/em&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bndtools – Prepare project dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;bnd.bnd&lt;/em&gt; file of the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project and switch to the &lt;em&gt;Build&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following bundles to the &lt;em&gt;Build Path&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.http.felix.jetty&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.http.felix.servlet-api&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.api&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create a &lt;code&gt;Servlet&lt;/code&gt; implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new package &lt;code&gt;org.fipro.inverter.http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new class &lt;code&gt;InverterServlet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= &quot;osgi.http.whiteboard.servlet.pattern=/invert&quot;,
    scope=ServiceScope.PROTOTYPE)
public class InverterServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Reference
    private StringInverter inverter;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        String input = req.getParameter(&quot;value&quot;);
        if (input == null) {
            throw new IllegalArgumentException(&quot;input can not be null&quot;);
        }
        String output = inverter.invert(input);

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(
            &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Result is &quot; + output + &quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
        }

}&lt;/pre&gt;
&lt;p&gt;Let’s look at the implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is a typical &lt;code&gt;Servlet&lt;/code&gt; implementation that extends &lt;code&gt;javax.servlet.http.HttpServlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It is also an OSGi Declarative Service that is registered as service of type &lt;code&gt;javax.servlet.Servlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The service has PROTOTYPE scope&lt;/li&gt;
&lt;li&gt;A special property &lt;code&gt;osgi.http.whiteboard.servlet.pattern&lt;/code&gt; is set. This configures the context path of the &lt;code&gt;Servlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It references the &lt;code&gt;StringInverter&lt;/code&gt; OSGi service from the previous tutorial via field reference. And yes since Eclipse Oxygen this is also supported in Equinox (I wrote about this &lt;a href=&quot;http://blog.vogella.com/2017/03/15/osgi-declarative-services-news-in-eclipse-oxygen/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;PDE – Launch the example&lt;/h2&gt;
&lt;p&gt;Before explaining the details further, launch the example to see if our servlet is available via standard web browser. For this we create a launch configuration, so we can start directly from the IDE.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the menu entry &lt;em&gt;Run -&amp;gt; Run Configurations…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the tree view, right click on the &lt;em&gt;OSGi Framework&lt;/em&gt; node and select &lt;em&gt;New&lt;/em&gt; from the context menu&lt;/li&gt;
&lt;li&gt;Specify a name, e.g. &lt;em&gt;OSGi Inverter Http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deselect All&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select the following bundles&lt;br /&gt;
(note that we are using Eclipse Oxygen, in previous Eclipse versions &lt;em&gt;org.apache.felix.scr&lt;/em&gt; and &lt;em&gt;org.eclipse.osgi.util&lt;/em&gt; are not required)&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.api&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.provider&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.runtime&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.shell&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.console&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OSGi framework and DS bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.scr&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.ds&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.services&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.util&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equinox Http Service and Http Whiteboard&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.http.jetty&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.http.servlet&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jetty&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;javax.servlet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.continuation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.io&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.security&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.server&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.servlet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.jetty.util&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that &lt;em&gt;Default Auto-Start&lt;/em&gt; is set to &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Switch to the Arguments tab
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-Dorg.osgi.service.http.port=8080&lt;/code&gt; to the VM arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
If you include the above bundles in an Eclipse RCP application, ensure that you auto-start the &lt;em&gt;org.eclipse.equinox.http.jetty&lt;/em&gt; bundle to automatically start the Jetty server. This can be done on the &lt;em&gt;Configuration&lt;/em&gt; tab of the Product Configuration Editor.&lt;/p&gt;
&lt;p&gt;If you now open a browser and go to the URL &lt;a href=&quot;http://localhost:8080/invert?value=Eclipse&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/invert?value=Eclipse&lt;/a&gt; you should get a response with the inverted output.&lt;/p&gt;
&lt;h2&gt;Bndtools – Launch the example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;launch.bndrun&lt;/em&gt; file in the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project&lt;/li&gt;
&lt;li&gt;On the &lt;em&gt;Run&lt;/em&gt; tab add the following bundles to the &lt;em&gt;Run Requirements&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.inverter.provider&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.http.jetty&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Resolve&lt;/em&gt; to ensure all required bundles are added to the &lt;em&gt;Run Bundles&lt;/em&gt; via auto-resolve&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;-Dorg.osgi.service.http.port=8080&lt;/code&gt; to the &lt;em&gt;JVM Arguments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run OSGi&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Http Service &amp;amp; Http Whiteboard&lt;/h2&gt;
&lt;p&gt;Now why is this simply working? We only implemented a servlet and provided it as OSGi DS. And it is “magically” available via web interface. The answer to this is the OSGi Http Service Specification and the Http Whiteboard Specification. The &lt;a href=&quot;https://www.osgi.org/developer/specifications/&quot; target=&quot;_blank&quot;&gt;OSGi Compendium Specification&lt;/a&gt; R6 contains the &lt;em&gt;Http Service Specification Version 1.2&lt;/em&gt; (Chapter 102 – Page 45) and the &lt;em&gt;Http Whiteboard Specification Version 1.0&lt;/em&gt; (Chapter 140 – Page 1067).&lt;/p&gt;
&lt;p&gt;The purpose of the Http Service is to provide access to services on the internet or other networks for example by using a standard web browser. This can be done by registering servlets or resources to the Http Service. Without going too much into detail, the implementation is similar to an embedded web server, which is the reason why the default implementations in Equinox and Felix are based on Jetty.&lt;/p&gt;
&lt;p&gt;To register servlets and resources to the Http Service you know the Http Service API very well and you need to retrieve the Http Service and directly operate on it. As this is not every convenient, the Http Whiteboard Specification was introduced. This allows to register servlets and resources via the &lt;a href=&quot;http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf&quot; target=&quot;_blank&quot;&gt;Whiteboard Pattern&lt;/a&gt;, without the need to know the Http Service API in detail. I always think about the whiteboard pattern as a “&lt;em&gt;don’t call us, we will call you&lt;/em&gt;” pattern. That means you don’t need to register servlets on the Http Service directly, you will provide it as a service to the service registry, and the Http Whiteboard implementation will take it and register it to the Http Service.&lt;/p&gt;
&lt;p&gt;Via Http Whiteboard it is possible to register:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servlets&lt;/li&gt;
&lt;li&gt;Servlet Filters&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;Servlet Listeners&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will show some examples to be able to play around with the Http Whiteboard service.&lt;/p&gt;
&lt;h3&gt;Register Servlets&lt;/h3&gt;
&lt;p&gt;An example on how to register a servlet via Http Whiteboard is shown above. The main points are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The servlet needs to be registered as OSGi service of type &lt;code&gt;javax.servlet.Servlet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The component property &lt;em&gt;osgi.http.whiteboard.servlet.pattern&lt;/em&gt; needs to be set to specify the request mappings.&lt;/li&gt;
&lt;li&gt;The service scope should be PROTOTYPE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For registering servlets the following component properties are supported. (see OSGi Compendium Specification Release 6 – Table 140.4):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Component Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.asyncSupported&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the servlet supports the asynchronous operation mode. Allowed values are true and false independent of case. Defaults to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.errorPage&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Register the servlet as an error page for the error code and/or exception specified; the value may be a fully qualified exception type name or a three-digit HTTP status code in the range 400-599. Special values 4xx and 5xx can be used to match value ranges. Any value not being a three-digit number is assumed to be a fully qualified exception class name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The name of the servlet. This name is used as the value of the &lt;code&gt;javax.servlet.ServletConfig.getServletName()&lt;/code&gt;&lt;br /&gt;
method and defaults to the fully qualified class name of the service object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.servlet.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Registration pattern(s) for the servlet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;servlet.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are provided as init parameters to the &lt;code&gt;javax.servlet.Servlet.init(ServletConfig)&lt;/code&gt; method. The &lt;em&gt;servlet.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Http Whiteboard service needs to call &lt;code&gt;javax.servlet.Servlet.init(ServletConfig)&lt;/code&gt; to initialize the servlet before it starts to serve requests, and when it is not needed anymore &lt;code&gt;javax.servlet.Servlet.destroy()&lt;/code&gt; to shut down the servlet. If more than one Http Whiteboard implementation is available in a runtime, the &lt;code&gt;init()&lt;/code&gt; and &lt;code&gt;destroy()&lt;/code&gt; calls would be executed multiple times, which violates the Servlet specification. It is therefore recommended to use the PROTOTYPE scope for servlets to ensure that every Http Whiteboard implementation gets its own service instance.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
In a controlled runtime, like an RCP application that is delivered with one Http Whiteboard implementation and that does not support installing bundles at runtime, the usage of the PROTOTYPE scope is not required. Actually such a runtime ensures that the servlet is only instantiated and initialized once. But if possible it is recommended that the PROTOTYPE scope is used.&lt;/p&gt;
&lt;p&gt;To register a servlet as an error page, the service property &lt;em&gt;osgi.http.whiteboard.servlet.errorPage&lt;/em&gt; needs to be set. The value can be either a three-digit  HTTP error code, the special codes 4xx or 5xx to specify a range or error codes, or a fully qualified exception class name. The service property &lt;em&gt;osgi.http.whiteboard.servlet.pattern &lt;/em&gt;is not required for servlets that provide error pages.&lt;/p&gt;
&lt;p&gt;The following snippet shows an error page servlet that deals with &lt;code&gt;IllegalArgumentExceptions&lt;/code&gt; and the HTTP error code 500. It can be tested by calling the inverter servlet without a query parameter.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= {
        &quot;osgi.http.whiteboard.servlet.errorPage=java.lang.IllegalArgumentException&quot;,
        &quot;osgi.http.whiteboard.servlet.errorPage=500&quot;
    },
    scope=ServiceScope.PROTOTYPE)
public class ErrorServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(
        &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You need to provide an input!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
    }
}&lt;/pre&gt;
&lt;h3&gt;Register Filters&lt;/h3&gt;
&lt;p&gt;Via servlet filters it is possible to intercept servlet invocations. They are used to modify the &lt;code&gt;ServletRequest&lt;/code&gt; and &lt;code&gt;ServletResponse&lt;/code&gt; to perform common tasks before and after the servlet invocation.&lt;/p&gt;
&lt;p&gt;The example below shows a servlet filter that adds a simple header and footer on each request to the servlet with the &lt;em&gt;/invert&lt;/em&gt; pattern:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = &quot;osgi.http.whiteboard.filter.pattern=/invert&quot;,
    scope=ServiceScope.PROTOTYPE)
public class SimpleServletFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig)
            throws ServletException { }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        response.setContentType(&quot;text/html&quot;);
        response.getWriter().write(&quot;&amp;lt;b&amp;gt;Inverter Servlet&amp;lt;/b&amp;gt;&amp;lt;p&amp;gt;&quot;);
        chain.doFilter(request, response);
        response.getWriter().write(&quot;&amp;lt;/p&amp;gt;&amp;lt;i&amp;gt;Powered by fipro&amp;lt;/i&amp;gt;&quot;);
    }

    @Override
    public void destroy() { }

}&lt;/pre&gt;
&lt;p&gt;To register a servlet filter the following criteria must match:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It needs to be registered as OSGi service of type &lt;code&gt;javax.servlet.Filter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;One of the given component properties needs to be set:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.pattern&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.regex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.filter.servlet&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The service scope should be PROTOTYPE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For registering servlet filters the following service properties are supported. (see OSGi Compendium Specification Release 6 – Table 140.5):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.asyncSupported&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the servlet filter supports asynchronous operation mode. Allowed values are true and false independent of case. Defaults to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.dispatcher&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Select the dispatcher configuration when the&lt;br /&gt;
servlet filter should be called. Allowed string values are REQUEST, ASYNC, ERROR, INCLUDE, and FORWARD. The default for a filter is REQUEST.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The name of a servlet filter. This name is used as the value of the &lt;code&gt;FilterConfig.getFilterName()&lt;/code&gt; method and defaults to the fully qualified class name of the service object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the specified URL path patterns. The format of the patterns is specified in the servlet specification.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.regex&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the specified URL paths. The paths are specified as regular expressions following the syntax defined in the &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.filter.servlet&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Apply this servlet filter to the referenced servlet(s) by name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;filter.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are passed as init parameters to the &lt;code&gt;Filter.init()&lt;/code&gt; method. The &lt;em&gt;filter.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Register Resources&lt;/h3&gt;
&lt;p&gt;It is also possible to register a service that informs the Http Whiteboard service about static resources like HTML files, images, CSS- or Javascript-files. For this a simple service can be registered that only needs to have the following two mandatory service properties set:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.resource.pattern&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The pattern(s) to be used to serve resources. As defined by the [4] Java Servlet 3.1 Specification in section 12.2, Specification of Mappings.This property marks the service as a resource service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.resource.prefix&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The prefix used to map a requested resource to the bundle’s entries. If the request’s path info is not null, it is appended to this prefix. The resulting&lt;br /&gt;
string is passed to the &lt;code&gt;getResource(String)&lt;/code&gt; method of the associated Servlet Context Helper.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The service does not need to implement any specific interface or function. All required information is provided via the component properties.&lt;/p&gt;
&lt;p&gt;To create a resource service follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a folder &lt;em&gt;resources&lt;/em&gt; in the project &lt;em&gt;org.fipro.inverter.http&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add an image in that folder, e.g. &lt;em&gt;eclipse_logo.png&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PDE&lt;/strong&gt; – Add the &lt;em&gt;resources&lt;/em&gt; folder in the &lt;em&gt;build.properties&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bndtools&lt;/strong&gt; – Add the following line to the &lt;em&gt;bnd.bnd&lt;/em&gt; file on the &lt;em&gt;Source&lt;/em&gt; tab&lt;br /&gt;
&lt;code&gt;-includeresource: resources=resources&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create resource service&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = ResourceService.class,
    property = {
        &quot;osgi.http.whiteboard.resource.pattern=/files/*&quot;,
        &quot;osgi.http.whiteboard.resource.prefix=/resources&quot;})
public class ResourceService { }&lt;/pre&gt;
&lt;p&gt;After starting the application the static resources located in the &lt;em&gt;resources&lt;/em&gt; folder are available via the &lt;em&gt;/files&lt;/em&gt; path in the URL, e.g. &lt;a href=&quot;http://localhost:8080/files/eclipse_logo.png&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/files/eclipse_logo.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
While writing this blog post I came across a very nasty issue. Because I initially registered the servlet filter for the &lt;em&gt;/*&lt;/em&gt; pattern, the simple header and footer where always added. This also caused setting the content type, that didn’t match the content type of the image of course. And so the static content was never shown correctly. So if you want to use servlet filters to add common headers and footers, you need to take care of the pattern so the servlet filter is not applied to static resources.&lt;/p&gt;
&lt;h3&gt;Register Servlet Listeners&lt;/h3&gt;
&lt;p&gt;It is also possible to register different servlet listeners as whiteboard services. The following listeners are supported according to the servlet specification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServletContextListener &lt;/code&gt;– Receive notifications when Servlet Contexts are initialized and destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletContextAttributeListener &lt;/code&gt;– Receive notifications for Servlet Context attribute changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletRequestListener &lt;/code&gt;– Receive notifications for servlet requests coming in and being destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServletRequestAttributeListener &lt;/code&gt;– Receive notifications when servlet Request attributes change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionListener &lt;/code&gt;– Receive notifications when Http Sessions are created or destroyed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionAttributeListener &lt;/code&gt;– Receive notifications when Http Session attributes change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpSessionIdListener &lt;/code&gt;– Receive notifications when Http Session ID changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is only one component property needed to be set so the Http Whiteboard implementation is handling the listener.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.listener&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;When set to true this listener service is handled by the Http Whiteboard implementation. When not set or set to false the service is ignored. Any other value is invalid.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example shows a simple &lt;code&gt;ServletRequestListener&lt;/code&gt; that prints out the client address on the console for each request (borrowed from the OSGi Compendium Specification):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(property = &quot;osgi.http.whiteboard.listener=true&quot;)
public class SimpleServletRequestListener
    implements ServletRequestListener {

    public void requestInitialized(ServletRequestEvent sre) {
        System.out.println(&quot;Request initialized for client: &quot;
            + sre.getServletRequest().getRemoteAddr());
    }

    public void requestDestroyed(ServletRequestEvent sre) {
        System.out.println(&quot;Request destroyed for client: &quot;
            + sre.getServletRequest().getRemoteAddr());
    }

}&lt;/pre&gt;
&lt;h3&gt;Servlet Context and Common Whiteboard Properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ServletContext&lt;/code&gt; is specified in the servlet specification and provided to the servlets at runtime by the container. By default there is one &lt;code&gt;ServletContext&lt;/code&gt; and without additional information the servlets are registered to that default &lt;code&gt;ServletContext&lt;/code&gt; via the Http Whiteboard implementation. This could lead to scenarios where different bundles provide servlets for the same request mapping. In that case the &lt;em&gt;service.ranking&lt;/em&gt; will be inspected to decide which servlet should be delivered. If the servlets belong to different applications, it is possible to specify different contexts. This can be done by registering a custom &lt;code&gt;ServletContextHelper&lt;/code&gt; as whiteboard service and associate the servlets to the corresponding context. The &lt;code&gt;ServletContextHelper&lt;/code&gt; can be used to customize the behavior of the &lt;code&gt;ServletContext&lt;/code&gt; (e.g. handle security, provide resources, …) and to support multiple web-applications via different context paths.&lt;/p&gt;
&lt;p&gt;A custom &lt;code&gt;ServletContextHelper&lt;/code&gt; it needs to be registered as service of type &lt;code&gt;ServletContextHelper&lt;/code&gt; and needs to have the following two service properties set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.context.name&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;osgi.http.whiteboard.context.path&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.name&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Name of the Servlet Context Helper. This name can be referred to by Whiteboard services via the &lt;em&gt;osgi.http.whiteboard.context.select&lt;/em&gt; property. The syntax of the name is the same as the syntax for a Bundle Symbolic Name. The default Servlet Context Helper is named default. To override the&lt;br /&gt;
default, register a custom &lt;code&gt;ServletContextHelper&lt;/code&gt; service with the name default. If multiple Servlet Context Helper services are registered with the same name, the one with the highest Service Ranking is used. In case of a tie, the service with the lowest service ID wins. In other words, the normal OSGi service ranking applies.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.path&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Additional prefix to the context path for servlets. This property is mandatory. Valid characters are specified in IETF RFC 3986, section 3.3. The context path of the default Servlet Context Helper is /. A custom default Servlet Context Helper may use an alternative path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;context.init.*&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Properties starting with this prefix are provided as init parameters through the &lt;code&gt;ServletContext.getInitParameter()&lt;/code&gt; and &lt;code&gt;ServletContext.getInitParameterNames()&lt;/code&gt; methods. The &lt;em&gt;context.init.&lt;/em&gt; prefix is removed from the parameter name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example will register a &lt;code&gt;ServletContextHelper&lt;/code&gt; for the context path &lt;em&gt;/eclipse&lt;/em&gt; and will retrieve resources from &lt;em&gt;http://www.eclipse.org&lt;/em&gt;. It is registered with BUNDLE service scope to ensure that every bundle gets its own instance, which is for example important to resolve resources from the correct bundle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Note:&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Create it in a new package &lt;code&gt;org.fipro.inverter.http.eclipse&lt;/code&gt; within the &lt;em&gt;org.fipro.inverter.http&lt;/em&gt; project, as we will need to create some additional resources to show how this example actually works.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = ServletContextHelper.class,
    scope = ServiceScope.BUNDLE,
    property = {
        &quot;osgi.http.whiteboard.context.name=eclipse&quot;,
        &quot;osgi.http.whiteboard.context.path=/eclipse&quot; })
public class EclipseServletContextHelper extends ServletContextHelper {

    public URL getResource(String name) {
        // remove the path from the name
        name = name.replace(&quot;/eclipse&quot;, &quot;&quot;);
        try {
            return new URL(&quot;http://www.eclipse.org/&quot; + name);
        } catch (MalformedURLException e) {
            return null;
        }
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
With PDE remember to add &lt;code&gt;org.osgi.service.http.context&lt;/code&gt; to the &lt;em&gt;Imported Packages&lt;/em&gt;. With Bndtools remember to add the new package to the &lt;em&gt;Private Packages&lt;/em&gt; in the &lt;em&gt;bnd.bnd&lt;/em&gt; file on the &lt;em&gt;Contents&lt;/em&gt; tab.&lt;/p&gt;
&lt;p&gt;To associate servlets, servlet filter, resources and listeners to a &lt;code&gt;ServletContextHelper&lt;/code&gt;, they share common service properties (see OSGi Compendium Specification Release 6 – Table 140.3) additional to the service specific properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.context.select&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;An LDAP-style filter to select the associated &lt;code&gt;ServletContextHelper&lt;/code&gt; service to use. Any service property of the Servlet Context Helper can be filtered on. If this property is missing the default Servlet Context Helper is used. For example, to select a Servlet Context Helper with name myCTX provide the following value:&lt;br /&gt;
&lt;code&gt;(osgi.http.whiteboard.context.name=myCTX)&lt;/code&gt;To select all Servlet Context Helpers provide the following value:&lt;br /&gt;
&lt;code&gt;(osgi.http.whiteboard.context.name=*)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;osgi.http.whiteboard.target&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The value of this service property is an LDAP style filter expression to select the Http Whiteboard implementation(s) to handle this Whiteboard service. The LDAP filter is used to match HttpServiceRuntime services. Each Http Whiteboard implementation exposes exactly one &lt;code&gt;HttpServiceRuntime&lt;/code&gt; service. This property is used to associate the Whiteboard service with the Http Whiteboard implementation that registered the &lt;code&gt;HttpServiceRuntime&lt;/code&gt; service. If this property is not specified, all Http Whiteboard implementations can handle the service.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following example will register a servlet only for the introduced &lt;em&gt;/eclipse&lt;/em&gt; context:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service=Servlet.class,
    property= {
        &quot;osgi.http.whiteboard.servlet.pattern=/image&quot;,
        &quot;osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=eclipse)&quot;
    },
    scope=ServiceScope.PROTOTYPE)
public class ImageServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(&quot;text/html&quot;);
        resp.getWriter().write(&quot;Show an image from www.eclipse.org&quot;);
        resp.getWriter().write(
            &quot;&amp;lt;p&amp;gt;&amp;lt;img src='img/nattable/images/FeatureScreenShot.png'/&amp;gt;&amp;lt;/p&amp;gt;&quot;);
    }

}&lt;/pre&gt;
&lt;p&gt;And to make this work in combination with the introduced &lt;code&gt;ServletContextHelper&lt;/code&gt; we need to additionally register the resources for the &lt;em&gt;/img&lt;/em&gt; context, which is also only assigned to the &lt;em&gt;/eclipse&lt;/em&gt; context:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    service = EclipseImageResourceService.class,
    property = {
        &quot;osgi.http.whiteboard.resource.pattern=/img/*&quot;,
        &quot;osgi.http.whiteboard.resource.prefix=/eclipse&quot;,
        &quot;osgi.http.whiteboard.context.select=(osgi.http.whiteboard.context.name=eclipse)&quot;})
public class EclipseImageResourceService { }&lt;/pre&gt;
&lt;p&gt;If you start the application and browse to &lt;a href=&quot;http://localhost:8080/eclipse/image&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/eclipse/image&lt;/a&gt; you will see an output from the servlet together with an image that is loaded from &lt;em&gt;http://www.eclipse.org&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The component properties and predefined values are available via &lt;code&gt;org.osgi.service.http.whiteboard.HttpWhiteboardConstants&lt;/code&gt;. So you don’t need to remember them all and can also retrieve some additional information about the properties via the corresponding Javadoc.&lt;/p&gt;
&lt;p&gt;The sources for this tutorial are hosted on GitHub in the already existing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-pde&quot; target=&quot;_blank&quot;&gt;DS Getting Started (PDE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-bndtools&quot; target=&quot;_blank&quot;&gt;DS Getting Started (Bndtools)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Thu, 20 Apr 2017 05:58:50 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: IoT Developer Trends - 2017 Edition</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/U7fFDK-YfAc/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/U7fFDK-YfAc/</link>
	<description>The third annual IoT Developer Survey results are now available! What has changed in IoT this year?&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/U7fFDK-YfAc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Apr 2017 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: IoT Developer Trends 2017 Edition</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4077</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/U7fFDK-YfAc/</link>
	<description>&lt;p&gt;For the last 3 years we have been tracking the trends of the IoT developer community through the IoT Developer Survey [&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2015&quot;&gt;2015&lt;/a&gt;] [&lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2016&quot;&gt;2016&lt;/a&gt;]. Today, we released the third edition of the &lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017&quot;&gt;IoT Developer Survey 2017&lt;/a&gt;. As in previous years, the report provides some interesting insights into what IoT developers are thinking and using to build IoT solutions. Below are some of the key trends we identified in the results.&lt;/p&gt;
&lt;p&gt;The survey is the results of a collaboration between the &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT Working Group&lt;/a&gt;, &lt;a href=&quot;http://iot.ieee.org/&quot;&gt;IEEE&lt;/a&gt;, &lt;a href=&quot;http://agile-iot.eu/&quot;&gt;Agile-IoT EU&lt;/a&gt; and the &lt;a href=&quot;http://www.theinternetofthings.eu/&quot;&gt;IoT Council.&lt;/a&gt; Each partner promoted the survey to their respective communities. A total of 713 individuals participated in the survey. The complete report is available for everyone and we also make available the detailed data [&lt;a href=&quot;https://drive.google.com/file/d/0B4wohKJVD2qGT1NvX0MyeFpjUUE/view?usp=sharing&quot;&gt;xls&lt;/a&gt;, &lt;a href=&quot;https://drive.google.com/file/d/0B4wohKJVD2qGcHFSeE1ieEpJQVU/view?usp=sharing&quot;&gt;odf&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;As with any survey of this type, I always caution people to see these results as one data point that should be compared to other industry reports. All of these surveys have inherent biases so identifying trends that span surveys is important.&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;Key Trends from 2017 Survey&lt;/b&gt;&lt;/h2&gt;
&lt;h3&gt; 1. &lt;b&gt;Expanding Industry Adoption of IoT&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;The 2017 survey participants appear to be involved in a more diverse set of industries. IoT Platform and Home Automation industries continue to lead but industries such as Industrial Automation, Smart Cities, Energy Management experience significant growth between 2016 to 2017.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;industries&quot; class=&quot;aligncenter size-medium wp-image-4101&quot; height=&quot;148&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/industries.png?w=300&amp;amp;h=148&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;2. Security is the key concern but….&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Security continues to be the main concern IoT developers with 46.7% respondents indicating it was a concern. Interoperability (24.4%) and Connectivity (21.4%) are the next most popular concerns mentioned. It would appear that Interoperability is on a downward trend for 2015 (30.7%) and 2016 (29.4%) potentially indicating the work on standards and IoT middleware are lessening this concern.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;concerns2017&quot; class=&quot;aligncenter size-medium wp-image-4104&quot; height=&quot;152&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/concerns2017.png?w=300&amp;amp;h=152&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This year we asked what security-related technologies were being used for IoT solutions. The top two security technologies selected were the existing software technologies, ie. Communication Security (TLS, DTLS) (48.3%) and Data Encryption (43.2%). Hardware oriented security solutions were less popular, ex. Trusted Platform Modules (10%) and Hardware Security Modules (10.6%). Even Over the Air Update was only being used by 18.5% of the respondents. Security may be a key concern but it certainly seems like the adoption of security technology is lagging.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;security&quot; class=&quot;aligncenter size-medium wp-image-4119&quot; height=&quot;133&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/security.png?w=300&amp;amp;h=133&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;3. Top IoT Programming Language Depends…&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Java and C are the primary IoT programming languages, along with significant usage of C++, Python and JavaScript. New this year we asked in the survey, language usage by IoT categories: Constrained Devices, IoT Gateway and IoT Cloud Platform. Broken down by these categories it is apparent that language usage depends on the target destination for the developed software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On constrained devices, C (56.4%) and C++ (38.3%) and the dominant languages being used. Java (21.2%) and Python (20.8%) have some usage but JavaScript (10.3%) is minimal.&lt;/li&gt;
&lt;li&gt;On IoT Gateways, the language of choice is more diverse, Java (40.8%), C (30.4%), Python (29.9%) and C++ (28.1%) are all being used. JavaScript and Node.js have some use.&lt;/li&gt;
&lt;li&gt;On IoT Cloud Platforms, Java (46.3%) emerges as the dominant language. JavaScript (33.6%), Node.js (26.3%) and Python (26.2%) have some usage. Not surprisingly, C (7.3%) and C++ (11.6%) usage drops off significantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, it is clear IoT solution development requires a diverse set of language programming skills. The specific language of choice really depends on the target destination.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;4. Linux is key OS; Raspbian and Ubuntu top IoT Linux distros&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Linux continues to be the main operating system for IoT. This year we asked to identify OS by the categories: Constrained Device and IoT Gateway. On Constrained Devices, Linux (44.1%) is the most popular OS but the second most popular is No OS/ Bar Metal (27.6%). On IoT Gateway, Linux (66.9%) becomes even more popular and Windows (20.5%) becomes the second choice.&lt;/p&gt;
&lt;p&gt;The survey also asked which Linux distro is being used. Raspbian (45.5%) and Ubuntu (44.%) are the two top distros for IoT.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;linuxdistros&quot; class=&quot;aligncenter size-medium wp-image-4108&quot; height=&quot;146&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/linuxdistros.png?w=300&amp;amp;h=146&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If Linux is the dominant operating system for IoT, how are the alternative IoT operating systems doing? In 2017, Windows definitely experienced a big jump from previous years. It also seems like FreeRTOS and Contiki are experiencing growth in their usage.&lt;/p&gt;
&lt;h3&gt; &lt;b&gt;5. Amazon, MS and Google Top IoT Cloud Platforms&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Amazon (42.7%) continues to be the leading IoT Cloud Platform followed by MS Azure (26.7%) and Google Cloud Platform (20.4%). A significant change this year has been the drop of Private / On-premise cloud usage, from 34.9% in 2016 to 18.4% in 2017. This might be an indication that IoT Cloud Platforms are now more mature and developers are ready to embrace them.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;cloud&quot; class=&quot;aligncenter size-medium wp-image-4111&quot; height=&quot;146&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/cloud.png?w=300&amp;amp;h=146&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;6. Bluetooth, LPWAN protocols and 6LowPAN trending up; Thread sees little adoption&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;For the last 3 years we have asked what connectivity protocols developers use for IoT solutions. The main response has been TCP/IP and Wi-Fi. However, there are a number of connectivity standards and technologies that are being developed for IoT so it has been interesting to track their adoption within the IoT developer community. Based on the 2017 data, it would appear Bluetooth/Bluetooth Smart (48.2%), LPWAN technologies (ex LoRa, Sigfox, LTE-M) (22.4%) and 6LoWPAN (21.4%) are being adopted by the IoT developer community. However, it would appear Thread (6.4%) is still having limited success with developer adoption.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;connectivity2017&quot; class=&quot;aligncenter size-medium wp-image-4114&quot; height=&quot;150&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/connectivity2017.png?w=300&amp;amp;h=150&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;Summary&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Overall, the &lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017&quot;&gt;survey results&lt;/a&gt; are showing some common patterns for IoT developers. The report also looks at common IoT hardware architecture, IDE usage, perceptions of IoT Consortiums, adoption of IoT standards, open source participation in IoT and lots more. I hope the report provides useful information source to the wider IoT industry.&lt;/p&gt;
&lt;p&gt;Next week we will be doing a webinar to go through the details of the results. Please &lt;a href=&quot;https://www.meetup.com/Virtual-IoT/events/239299887/&quot;&gt;join us on April 26 at 10:30amET/16:30pmCET&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;2017 IoT Survey - webinar 2&quot; class=&quot;aligncenter size-medium wp-image-4140&quot; height=&quot;150&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/2017-iot-survey-webinar-2.png?w=300&amp;amp;h=150&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank you to everyone who participated in the survey, the individual input is what makes these surveys useful. Also, thank you to our co-sponsors &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT Working Group&lt;/a&gt;, &lt;a href=&quot;http://iot.ieee.org/&quot;&gt;IEEE&lt;/a&gt;, &lt;a href=&quot;http://agile-iot.eu/&quot;&gt;Agile IoT&lt;/a&gt; and the &lt;a href=&quot;http://www.theinternetofthings.eu/&quot;&gt;IoT Council&lt;/a&gt;. It is great to be able to collaborate with other successful IoT communities.&lt;/p&gt;
&lt;p&gt;We will plan to do another survey next year. Feel free to leave any comments or thoughts on how we can improve it.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4077/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4077/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4077&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/U7fFDK-YfAc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Apr 2017 12:00:24 +0000</pubDate>
</item>
<item>
	<title>Sebastian Zarnekow: Why DSLs?</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6255758224607466565.post-6091194211870884614</guid>
	<link>http://zarnekow.blogspot.com/2017/04/why-dsls.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;A lot has been written about &lt;a href=&quot;http://lmgtfy.com/?q=domain+specific+languages&quot;&gt;domain specific languages&lt;/a&gt;, their purpose and their application. According to the ever changing wisdom of wikipedia, a DSL “is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_language&quot;&gt;computer language&lt;/a&gt; specialized to a particular application &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_(software_engineering)&quot;&gt;domain&lt;/a&gt;. This is in contrast to a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_language&quot;&gt;general-purpose language&lt;/a&gt; (GPL), which is broadly applicable across domains.” In other words, a DSL is supposed to help to implement software systems or parts of those in a more efficient way. But it begs the question, why engineers should learn new syntaxes, new APIs and new tools rather than using their primary language and just get the things done?&lt;br /&gt;&lt;br /&gt;Here is my take on this. And to answer that question, let’s move the discussion away from programming languages towards a more general language understanding. And instead of talking abstract, I’ll use a very concrete example. In fact one of the most discussed domains ever - and one that literally everyone has an opinion about: The weather.&lt;br /&gt;&lt;br /&gt;We all know this situation: When watching the news, the forecaster will tell something about sunshine duration, wind speed and direction, or temperature. Being not a studied meteorologist, I can still find my way through most of the facts, though the &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_of_precipitation&quot;&gt;probability of precipitation&lt;/a&gt; always gives me a slight headache. If we look at the vocabulary that is used in an average weather forecast, we can clearly call that a domain specific language, though it only scratches the surface of meteorology. But what happens, when two meteorologists talk to each other about the weather? My take: they will use a very efficient vocabulary to discuss it unambiguously.&lt;br /&gt;Now let’s move this gedankenexperiment forward. There are approximately &lt;a href=&quot;https://everything2.com/title/Finnish+words+for+snow&quot;&gt;40 non-compound words&lt;/a&gt; in the Finnish language that describe snow. Now what happens, when a &lt;i&gt;Finnish&lt;/i&gt; forecaster and a &lt;i&gt;German&lt;/i&gt; news anchor talk about snowy weather conditions and the anchorman takes &lt;i&gt;English&lt;/i&gt; notes on that? I bet it is safe to assume that there will be a big loss of precision when it comes to the mutual agreement on the exact form of snowy weather. And even more so, when this German guy later on tries to explain to another Finn what the weather was like. The bottomline of this: common vocabulary and language is crucial to successful communication.&lt;br /&gt;&lt;br /&gt;Back to programming. Let’s assume that the &lt;i&gt;English&lt;/i&gt; language is a general purpose programming language, the &lt;i&gt;German&lt;/i&gt; guy is a software developer and the &lt;i&gt;Finnish&lt;/i&gt; forecaster is a domain expert for snowy weather. This may all sound a little farfetched, but in fact it is exactly how most software projects are run: A domain expert explains the requirements to a developer. The dev will start implementing the requirements. Other developers will be onboarded on the project. They try to wrap their head around the state of the codebase and surely read the subtleties of the implementation differently, no matter how fluent they are in English. Follow-up meetings will be scheduled to clarify questions with the domain experts. And the entire communication is prone to loss in precision. In the end all involved parties talk about similar yet slightly different things. Misunderstandings go potentially unnoticed and cause a lot of frustration on all sides.&lt;br /&gt;&lt;br /&gt;This is where domain specific languages come into play! Instead of a tedious, multi-step translation from one specialized vocabulary to a general purpose language and vice versa, the logic is directly implemented using the domain specific terms and notation. The knowledge is captured with fewer manual transformation steps; the system is easier to write, understand and review. This may even work to the extent that the domain experts do write the code themselves. Or they pair up with the software engineers and form a team.&lt;br /&gt;&lt;br /&gt;As usual, there is no such thing as free lunch. As long as your are not &lt;a href=&quot;http://powerlisting.wikia.com/wiki/Omnilingualism&quot;&gt;Omnilingual&lt;/a&gt;, you should probably not waste your time learning Finnish by heart, especially when you are working with Spanish people next week, and the French team the week thereafter. But without any doubt, fluent Finnish will pay off as long as your are working with the Finns.&lt;br /&gt;&lt;br /&gt;A development process based on domain specific languages and thus based on a level of abstraction close to the problem domain can relief all involved people. There are fewer chances for misunderstandings and inaccurate translations. Speaking the same language and using the same vocabulary naturally feels like pulling together. And that’s what makes successful projects.&lt;/div&gt;</description>
	<pubDate>Mon, 17 Apr 2017 21:04:57 +0000</pubDate>
	<author>noreply@blogger.com (Sebastian Zarnekow)</author>
</item>
<item>
	<title>vert.x project: Dynamic Routing in Serverless Microservice with Vert.x Event Bus</title>
	<guid isPermaLink="true">http://vertx.io/blog/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus</guid>
	<link>http://vertx.io/blog/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus</link>
	<description>&lt;article&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;this is a re-publication of the following &lt;a href=&quot;https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;serverless-framework&quot;&gt;SERVERLESS FRAMEWORK&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://serverless.com&quot;&gt;Serverless Framework&lt;/a&gt; has become the &lt;em&gt;De Facto&lt;/em&gt; toolkit for building and deploying Serverless functions or applications. Its community has done a great job advancing the tools around Serverless architecture.&lt;/p&gt;
&lt;p&gt;However, in the Serverless community there is debate among developers on whether a single &lt;strong&gt;AWS Lambda&lt;/strong&gt; function should only be responsible for a single API endpoint. My answer, based on my real-world production experience, is &lt;strong&gt;NO&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Imagine if you are building a set of APIs with &lt;strong&gt;10&lt;/strong&gt; endpoints and you need to deploy the APIs to &lt;strong&gt;DEV&lt;/strong&gt;, &lt;strong&gt;STAGE&lt;/strong&gt; and &lt;strong&gt;PROD&lt;/strong&gt; environments. Now you are looking at &lt;strong&gt;30&lt;/strong&gt; different functions to version, deploy and manage - not to mention the &lt;em&gt;Copy &amp;amp; Paste&lt;/em&gt; code and configuration that will result from this type of set-up. &lt;strong&gt;NO THANKS!!!&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;I believe a more pragmatic approach is &lt;strong&gt;1 Lambda Function&lt;/strong&gt; == &lt;strong&gt;1 Microservice&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if you were building a &lt;strong&gt;User Microservice&lt;/strong&gt; with basic &lt;strong&gt;CRUD&lt;/strong&gt; functionality, you should implement &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; in a &lt;strong&gt;single&lt;/strong&gt; Lambda function. In the code, you should resolve the desired action by inspecting the request or the context.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-to-the-rescue&quot;&gt;VERT.X TO THE RESCUE&lt;/h2&gt;
&lt;p&gt;There are many benefits to using &lt;strong&gt;Vert.x&lt;/strong&gt; in any application. With &lt;strong&gt;Vert.x&lt;/strong&gt;, you get a rock-solid and lightweight toolkit for building &lt;strong&gt;reactive&lt;/strong&gt;, &lt;strong&gt;highly performant&lt;/strong&gt;, &lt;strong&gt;event-driven&lt;/strong&gt; and &lt;strong&gt;non-blocking&lt;/strong&gt; applications. The toolkit even provides asynchronous &lt;em&gt;APIs&lt;/em&gt; for accessing traditional blocking drivers such as &lt;strong&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-jdbc-client/groovy/&quot;&gt;JDBC&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, for this example, we will mainly focus on the &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt;. The event bus allows different parts of your application to communicate with each other via event messages. It supports &lt;em&gt;publish/subscribe&lt;/em&gt;, &lt;em&gt;point to point&lt;/em&gt;, and &lt;em&gt;request-response messaging&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the &lt;strong&gt;User Microservice&lt;/strong&gt; example above, we could treat the combination of the &lt;code&gt;HTTP METHOD&lt;/code&gt; and &lt;code&gt;RESOURCE PATH&lt;/code&gt; as a unique event channel, and register the subscribers/handlers to respond appropriately.&lt;/p&gt;
&lt;p&gt;Let’s dive right in.&lt;/p&gt;
&lt;h2 id=&quot;goal-&quot;&gt;GOAL:&lt;/h2&gt;
&lt;p&gt;Create a &lt;em&gt;reactive&lt;/em&gt;, &lt;em&gt;message-driven&lt;/em&gt;, &lt;em&gt;asynchronous&lt;/em&gt; &lt;strong&gt;User Microservice&lt;/strong&gt; with &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; CRUD operations in a &lt;em&gt;single&lt;/em&gt; &lt;strong&gt;&lt;a href=&quot;http://vertx.io/aws.amazon.com/lambda&quot;&gt;AWS Lambda Function&lt;/a&gt;&lt;/strong&gt; using the &lt;a href=&quot;https://serverless.com&quot;&gt;Serverless Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Serverless stack definition&lt;/code&gt;:&lt;/p&gt;


&lt;h2 id=&quot;solution-&quot;&gt;SOLUTION:&lt;/h2&gt;
&lt;p&gt;Use &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;‘s &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt; to handle &lt;strong&gt;dynamic routing&lt;/strong&gt; to &lt;strong&gt;event handlers&lt;/strong&gt; based on &lt;em&gt;HTTP method&lt;/em&gt; and &lt;em&gt;resource path&lt;/em&gt; from the API input.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lambda Handler&lt;/code&gt;:&lt;/p&gt;


&lt;h2 id=&quot;code-review&quot;&gt;CODE REVIEW&lt;/h2&gt;
&lt;p&gt;Lines &lt;code&gt;14-19&lt;/code&gt; initializes the &lt;strong&gt;Vert.x&lt;/strong&gt; instance. AWS Lambda will hold on to this instance for the life of the container/&lt;strong&gt;JVM&lt;/strong&gt;. It is reused in subsequent requests.&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;17&lt;/code&gt; registers the &lt;strong&gt;User Service&lt;/strong&gt; &lt;em&gt;handlers&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;22&lt;/code&gt; defines the &lt;strong&gt;main handler&lt;/strong&gt; method that is called when the &lt;strong&gt;Lambda function&lt;/strong&gt; is invoked.&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;27&lt;/code&gt; sends the Lambda function input to the (dynamic) &lt;strong&gt;address&lt;/strong&gt; where handlers are waiting to respond. &lt;/p&gt;
&lt;p&gt;Lines &lt;code&gt;44-66&lt;/code&gt; defines the specific &lt;em&gt;handlers&lt;/em&gt; and binds them to the appropriate &lt;em&gt;channels&lt;/em&gt; (http method + resource path)&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;SUMMARY&lt;/h2&gt;
&lt;p&gt;As you can see, &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;‘s &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt; makes it very easy to dynamically support multiple routes in a single &lt;strong&gt;Serverless&lt;/strong&gt; function. This reduces the number of functions you have to manage, deploy and maintain in &lt;strong&gt;AWS&lt;/strong&gt;. In addition, you gain access to asynchronous, non-blocking APIs that come standard with &lt;strong&gt;Vert.x&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serverless + Vert.x = BLISS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Patrik Suzzi: Dynamic Menu Item to select Theme in Eclipse IDE</title>
	<guid isPermaLink="false">http://www.asegno.com/?p=886</guid>
	<link>http://www.asegno.com/2017/eclipse/dynamic-menu-item-to-select-theme-in-eclipse-ide/</link>
	<description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=515085&quot;&gt;Bug 514458&lt;/a&gt;, I added the “Theme” dynamic menu to the Eclipse IDE. This post explains how I did this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_menu_eclipse_3_x_style&quot;&gt;Menu Eclipse 3.x style&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First edit the &lt;code&gt;plugin.xml&lt;/code&gt;, and add a menu contribution. With the locationURI &lt;code&gt;menu:org.eclipse.ui.appearance?after=org.eclipse.ui.window.appearance.separator1&lt;/code&gt;, you’ll contribute a submenu to the &lt;strong&gt;Window &amp;gt; Appearance&lt;/strong&gt; menu, just after the separator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/appearance-menu-structure.png&quot;&gt;&lt;img alt=&quot;appearance-menu-structure&quot; class=&quot;alignnone size-full wp-image-887&quot; height=&quot;262&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/appearance-menu-structure.png&quot; width=&quot;742&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add a &lt;strong&gt;Theme&lt;/strong&gt; menu under the menuContribution, and then add a child dynamic element.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;menuContribution
      locationURI=&quot;menu:org.eclipse.ui.appearance?after=org.eclipse.ui.window.appearance.separator1&quot;&amp;gt;
   &amp;lt;menu
         id=&quot;org.eclipse.ui.appearance.theme&quot;
         label=&quot;Theme&quot;&amp;gt;
      &amp;lt;dynamic
            class=&quot;org.eclipse.ui.internal.actions.ThemeDynamicMenu&quot;
            id=&quot;org.eclipse.ui.ide.dynamic1&quot;&amp;gt;
      &amp;lt;/dynamic&amp;gt;
   &amp;lt;/menu&amp;gt;
&amp;lt;/menuContribution&amp;gt;&lt;/pre&gt;&lt;p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Next, create the java class implementing the dynamic menu, and add mock code to verify the menu works.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;public class ThemeDynamicMenu extends ContributionItem {

	@Override
	public void fill(Menu menu, int index) {
		MenuItem menuItem = new MenuItem(menu, SWT.CHECK, index);
		menuItem.setText(&quot;Theme 1&quot;); //$NON-NLS-1$
		menuItem.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// executed on menu select
				System.out.println(&quot;Selected&quot;); //$NON-NLS-1$
			}
		});
	}

}&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Verify the menu is displayed where you expect, and the submenu dynamic entries are working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/new-theme-dynamic-menu.png&quot;&gt;&lt;img alt=&quot;new-theme-dynamic-menu&quot; class=&quot;alignnone size-full wp-image-888&quot; height=&quot;222&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/new-theme-dynamic-menu.png&quot; width=&quot;593&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now remove the line which adds the “Theme 1” item, and rewrite the body of the widgetSelected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The menu should have one menu item for each available theme, and each &lt;code&gt;widgetSelected(){…}&lt;/code&gt; should activate the corresponding theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The theme selection code is inspired tothe &lt;code&gt;ViewsPreferencePage&lt;/code&gt; one.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;/**
 * Implements the Dynamic Menu to choose the Theme.
 */
public class ThemeDynamicMenu extends ContributionItem {

	private static String THEME_ID = &quot;THEME_ID&quot;; //$NON-NLS-1$

	private IThemeEngine engine;
	private boolean highContrastMode;

	public ThemeDynamicMenu() {
		IWorkbench workbench = PlatformUI.getWorkbench();
		MApplication application = workbench.getService(MApplication.class);
		IEclipseContext context = application.getContext();
		engine = context.get(IThemeEngine.class);
		highContrastMode = workbench.getDisplay().getHighContrast();
	}

	@Override
	public void fill(Menu menu, int index) {
		for (ITheme theme : engine.getThemes()) {
			if (!highContrastMode &amp;amp;&amp;amp; !Util.isGtk() &amp;amp;&amp;amp; theme.getId().equals(E4Application.HIGH_CONTRAST_THEME_ID)) {
				continue;
			}
			MenuItem menuItem = new MenuItem(menu, SWT.CHECK, index);
			menuItem.setText(theme.getLabel());
			menuItem.setData(THEME_ID, theme.getId());
			menuItem.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					engine.setTheme(theme, !highContrastMode);
				}
			});
		}

		menu.addMenuListener(new MenuAdapter() {
			@Override
			public void menuShown(MenuEvent e) {
				for (MenuItem item : menu.getItems()) {
					boolean isActive = item.getData(THEME_ID).equals(engine.getActiveTheme().getId());
					item.setEnabled(!isActive);
					item.setSelection(isActive);
				}
			}
		});

	}

}&lt;/pre&gt;&lt;p&gt;Finally, launch the Eclipse IDE to check the menu works as expected.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/theming-menu.gif&quot;&gt;&lt;img alt=&quot;theming-menu&quot; class=&quot;alignnone size-full wp-image-895&quot; height=&quot;634&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/theming-menu.gif&quot; width=&quot;1011&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 11 Apr 2017 17:23:55 +0000</pubDate>
</item>
<item>
	<title>Frank Appel: Clean Sheet Service Update</title>
	<guid isPermaLink="false">https://facon-biz.prossl.de/?p=13375</guid>
	<link>http://www.codeaffine.com/2017/04/11/clean-sheet-service-update/</link>
	<description>&lt;p&gt;Written by &lt;a href=&quot;http://www.codeaffine.com/author/fappel/&quot; rel=&quot;nofollow&quot;&gt;Frank Appel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Early enough to pass as an easter gift we provide a Clean Sheet service update. The new version (0.5) is a simple bugfix release related to some &lt;code&gt;StyledText&lt;/code&gt; adapter problems on windows.&lt;/p&gt;
&lt;div class=&quot;notification lock cannothide&quot;&gt;&lt;div class=&quot;boximg infoimg&quot;&gt;&lt;/div&gt;&lt;h2&gt;The Clean Sheet Eclipse Design&lt;/h2&gt;

In case you've missed out on the topic and you are wondering what I'm talking about, here is a screenshot of my real world setup using the Clean Sheet theme (click on the image to enlarge).

&lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-screenshot.html&quot;&gt;&lt;img alt=&quot;Eclipse IDE Look and Feel: Clean Sheet Screenshot&quot; class=&quot;alignnone size-full wp-image-12279&quot; height=&quot;408&quot; src=&quot;http://www.codeaffine.com/wp-content/uploads/2015/11/clean-sheet-eclipse-theme.png&quot; width=&quot;850&quot; /&gt;&lt;/a&gt;

For more information please refer to the features landing page at &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet.html&quot; target=&quot;_blank&quot;&gt;http://fappel.github.io/xiliary/clean-sheet.html&lt;/a&gt;, read the introductory Clean Sheet feature description &lt;a href=&quot;http://www.codeaffine.com/2015/11/04/clean-sheet-an-ergonomic-eclipse-theme-for-windows-10/&quot;&gt;blog post&lt;/a&gt;, and check out the &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-new-and-noteworthy.html&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; page.&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Clean Sheet Service Update&lt;/h2&gt;
&lt;p&gt;Thanks to the participation of dedicated users, we were able to spot and resolve some nuisances. On windows, the Mylyn task editor is working again with Bugzilla. Also on windows, line number updates in java editors are propageted again on vertical scrolling per mouse drag. Please refer to the issues &lt;a href=&quot;https://github.com/fappel/xiliary/issues/75&quot; target=&quot;_blank&quot;&gt;#75&lt;/a&gt; and &lt;a href=&quot;https://github.com/fappel/xiliary/issues/76&quot; target=&quot;_blank&quot;&gt;#76&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Clean Sheet Installation&lt;/h2&gt;

&lt;p&gt;Drag the 'Install' link below to your running Eclipse instance&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;drag&quot; href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2588223&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;img alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; class=&quot;img-responsive&quot; src=&quot;http://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;Select Help &amp;gt; Install New Software.../Check for Updates.&lt;br /&gt;
P2 repository software site: @ &lt;a href=&quot;http://fappel.github.io/xiliary/&quot;&gt;http://fappel.github.io/xiliary/&lt;/a&gt;&lt;br /&gt;
Feature: Code Affine Theme&lt;/p&gt;

&lt;p&gt;After feature installation and workbench restart select the ‘Clean Sheet’ theme:&lt;br /&gt;
Preferences: General &amp;gt; Appearance &amp;gt; Theme: Clean Sheet&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;On a Final Note, …&lt;/h2&gt;
&lt;p&gt;Of course, it’s interesting to hear suggestions or find out about potential issues that need to be resolved. Feel free to use the &lt;a href=&quot;https://github.com/fappel/xiliary/issues&quot; target=&quot;_blank&quot;&gt;Xiliary Issue Tracker&lt;/a&gt; or the comment section below for reporting.&lt;/p&gt;
&lt;p&gt;With this in mind, I’d like to thank all the Clean Sheet adopters for the support and wish everybody a happy easter egg hunt &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;http://s.w.org/images/core/emoji/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h6&gt;Title Image: © Depositphotos.com/piccola&lt;/h6&gt;
&lt;p&gt;The post &lt;a href=&quot;http://www.codeaffine.com/2017/04/11/clean-sheet-service-update/&quot; rel=&quot;nofollow&quot;&gt;Clean Sheet Service Update&lt;/a&gt; appeared first on &lt;a href=&quot;http://www.codeaffine.com&quot; rel=&quot;nofollow&quot;&gt;Code Affine&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 11 Apr 2017 11:31:49 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EPLv2: A New Version of the Eclipse Public License</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/gTIWYU6JAIs/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/gTIWYU6JAIs/</link>
	<description>Participate in the community discussion on the Eclipse Foundation's revised Eclipse Public License (EPL).&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/gTIWYU6JAIs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 10 Apr 2017 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Sebastian Zarnekow: Moving on</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6255758224607466565.post-9069237360198255066</guid>
	<link>http://zarnekow.blogspot.com/2017/04/moving-on.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;span id=&quot;docs-internal-guid-aef576b6-57ae-b6b1-d444-9d6b8d0ef9f9&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;After an exciting journey of 15 months as the Director Engineering at SMACC, I decided to move on. It was not an easy decision to make, though it’s still one that I wanted to make. In the past year I made many new friends, met great people, and had the chance to work in a super nice team. It was a great time with plenty of challenges, important learnings and great fun. But I also realized that I was missing the time as a technical consultant. Language engineering always was and still is a strong passion of mine. So I figured it’s about time to move on and refocus. Xtext, Eclipse, Language oriented programming - exciting times ahead. Keeping you posted ...&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 10 Apr 2017 11:46:13 +0000</pubDate>
	<author>noreply@blogger.com (Sebastian Zarnekow)</author>
</item>
<item>
	<title>Mike Milinkovich: EPLv2: A New Version of the Eclipse Public License</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1239</guid>
	<link>https://mmilinkov.wordpress.com/2017/04/07/eplv2-a-new-version-of-the-eclipse-public-license/</link>
	<description>&lt;p&gt;The Eclipse Foundation is in the process of revising the &lt;a href=&quot;https://www.eclipse.org/org/documents/epl-v10.php&quot; target=&quot;_blank&quot;&gt;Eclipse Public License&lt;/a&gt; (EPL). Refreshing a popular open source license is a big job, and one that we have been chipping away at for over a year.&lt;/p&gt;
&lt;p&gt;The EPL and its predecessor the &lt;a href=&quot;https://opensource.org/licenses/CPL-1.0&quot; target=&quot;_blank&quot;&gt;Common Public License&lt;/a&gt; have been around for about 16 years now. For a full presentation on the changes we are considering and their motivation, you can check out our &lt;a href=&quot;https://www.slideshare.net/MikeMilinkovich/eplv2-a-new-version-of-the-eclipse-public-license&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt;, or the &lt;a href=&quot;https://youtu.be/exhk6sS5_0I&quot; target=&quot;_blank&quot;&gt;video on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please get involved. Just as importantly, if you are a developer involved in the Eclipse community and ecosystem, encourage your colleagues in the legal department to get involved. The discussions are happening on the &lt;a href=&quot;http://dev.eclipse.org/mhonarc/lists/epl-discuss/&quot; target=&quot;_blank&quot;&gt;epl-discuss@eclipse.org&lt;/a&gt; mail list (&lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/epl-discuss&quot; target=&quot;_blank&quot;&gt;subscription required&lt;/a&gt;). The most recent public drafts of the EPLv2 can be found &lt;a href=&quot;http://dev.eclipse.org/mhonarc/lists/epl-discuss/msg00116.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://mmilinkov.wordpress.com/category/foundation/&quot;&gt;Foundation&lt;/a&gt;, &lt;a href=&quot;https://mmilinkov.wordpress.com/category/open-source/&quot;&gt;Open Source&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/mmilinkov.wordpress.com/1239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/mmilinkov.wordpress.com/1239/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=mmilinkov.wordpress.com&amp;amp;blog=19461799&amp;amp;post=1239&amp;amp;subd=mmilinkov&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 07 Apr 2017 18:17:35 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms – Day 5 – Layouts</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28066</guid>
	<link>http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms is a framework for efficiently building form-based web UIs. These UIs, which are usually embedded in a business application, allow end users to enter, modify, and view data. JSON Forms eliminates the need to write HTML templates and Javascript for data binding by hand. It allows you to create customizable forms by leveraging the capabilities of JSON and &lt;/span&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and providing a simple and declarative way of describing forms. Forms are then rendered with a UI framework, currently one that is based on AngularJS. If you would like to know more about JSON Forms, the &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms homepage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a good starting point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we would like to introduce the framework based on a real-world example application, a task tracker called “Make It happen”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 1&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 2&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, we described the overall requirements as well as created a fully working form for the entity “Task”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 3&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we showed how to extend the form with new attributes and controls. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 4&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we introduced rule-based visibility of controls, based on the data, the user has entered.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you would like to follow this blog series please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This is where we will announce every new blog post regarding JSON Forms. After the first 4 days, the current form looks like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image10.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28069&quot; height=&quot;253&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image10-300x253.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While the form is already fully functional, including data binding, validation, and even rule-based validation, the layout is definitely not optimal. Basically, we just see a vertical list of all controls. Therefore, in this blog post, we want to refine the layout using the JSON Forms layout elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far, we have embedded all controls into one root “VerticalLayout”. This type of layout always arranges its children vertically. However, JSON Forms also supports different layout types, e.g. “HorizontalLayout”. Of course, those layouts can be combined by embedding one layout element into another. For example to achieve a two column layout you can use a “HorizontalLayout” element which contains two “VerticalLayout” elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In our current form, we could save some vertical space by putting the “dueDate” attribute in one shared “HorizontalLayout” with the “rating” property. The same applies for “recurrence” and “recurrence_interval”. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The resulting UI schema looks like this:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JSON&quot;&gt;{
  &quot;type&quot;: &quot;VerticalLayout&quot;,
  &quot;elements&quot;: [
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;label&quot;: false,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/done&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/name&quot;
      }
    },
    {
      &quot;type&quot;: &quot;HorizontalLayout&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/due_date&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/rating&quot;
          }
        }
      ]
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/description&quot;
      },
      &quot;options&quot;: {
          &quot;multi&quot;:true
      }
    },
    {
      &quot;type&quot;: &quot;HorizontalLayout&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/recurrence_interval&quot;
          },
          &quot;rule&quot;: {
              &quot;effect&quot;: &quot;HIDE&quot;,
              &quot;condition&quot;: {
                  &quot;scope&quot;: {
                      &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
                  },
                  &quot;expectedValue&quot;: &quot;Never&quot;
              }
          }
        }
      ]
    }
  ]
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So by simply moving things around a bit in the UI schema, we can produce the following layout:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28071&quot; height=&quot;188&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-300x188.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can imagine, it is pretty easy to produce more advanced layouts by just combining layout elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that EMF Forms supports more layout types than horizontal and vertical. As an example, you could use the element “Categorization” to separate controls into several sub categories. The following screenshot shows a rendered categorization element, where the attributes of a task are split into two tabs. Please note that the horizontal layout described before is now nested into the categorization.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image05.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28072&quot; height=&quot;145&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image05-300x145.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image14.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28073&quot; height=&quot;119&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image14-300x119.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The UI Schema for this layout is as follows:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JSON&quot;&gt;{
  &quot;type&quot;: &quot;Categorization&quot;,
  &quot;elements&quot;: [
    {
      &quot;type&quot;: &quot;Category&quot;,
      &quot;label&quot;: &quot;Main&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;label&quot;: false,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/done&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/name&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/description&quot;
          },
          &quot;options&quot;: {
              &quot;multi&quot;:true
          }
        }
      ]
    },
    {
      &quot;type&quot;: &quot;Category&quot;,
      &quot;label&quot;: &quot;Additional&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;HorizontalLayout&quot;,
          &quot;elements&quot;: [
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/due_date&quot;
              }
            },
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/rating&quot;
              }
            }
          ]
        },
        {
          &quot;type&quot;: &quot;HorizontalLayout&quot;,
          &quot;elements&quot;: [
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
              }
            },
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/recurrence_interval&quot;
              },
              &quot;rule&quot;: {
                  &quot;effect&quot;: &quot;HIDE&quot;,
                  &quot;condition&quot;: {
                      &quot;scope&quot;: {
                          &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
                      },
                      &quot;expectedValue&quot;: &quot;Never&quot;
                  }
              }
            }
          ]
        }
      ]
    }
  ]
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please refer to &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io/#/docs/uischema&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this page&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for an overview of the available layout elements in JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you might have noticed, the layout types of JSON Forms are a little different from what you know from HTML or any widget toolkit. As an example, there is no element called “tabbed layout”, but rather, it is called “Categorization”. The reason for this is that the UI Schema of JSON Forms is focussed on describing the structure of the layout rather than the actual rendering. The concrete visualization is the responsibility of the rendering component. This is analogous to the combination of HTML and CSS and allows for flexibility in rendering. As an example, the categorization element described above basically only specifies, that a form is split into several categories. The default renderer will translate this information into tabs. However, you could also implement an alternative renderer, which would display categories slightly differently, e.g. like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image04.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28074&quot; height=&quot;133&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image04-300x133.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image11.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28075&quot; height=&quot;108&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image11-300x108.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Talking about alternative renderers: This is a core feature of JSON Forms! So far, we have just used the default renderer for controls as well as for layouts. In the next post, we will describe how to implement and plugin custom renderers in order to adapt the way in which a form is rendered. So stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in trying out JSON Forms, please refer to the &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/firstform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Getting-Started tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This explains how to set up JSON Forms in your own project and how you can try out the first few steps yourself. If you would like to follow this blog series, please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. We will announce every new blog post on JSON Forms there. If you need support for JSON Forms or if you are interested in new features, please feel free to &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/support&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We hope to see you soon for the next day!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;List of all available days to date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;Day 0 and 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;Day 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot;&gt;Day 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/21/json-forms-day-6-custom-renderers/&quot;&gt;Day 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=JSON+Forms+%26%238211%3B+Day+5+%26%238211%3B+Layouts&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&amp;amp;t=JSON+Forms+%26%238211%3B+Day+5+%26%238211%3B+Layouts&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 07 Apr 2017 06:55:45 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: What is Eclipse?</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4063</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/c1JDIou00kE/</link>
	<description>&lt;p&gt;Last week we &lt;a href=&quot;https://www.surveymonkey.com/r/EclipseFdn&quot;&gt;launched a survey&lt;/a&gt; to solicit opinions about open source foundations and the general Eclipse community. A key thing we hope to accomplish with this survey is to gauge how people perceive the Eclipse brand? The Eclipse community has substantially grown and change over the last number of years, so we really want to know how people answer the question ‘What is Eclipse?’&lt;/p&gt;
&lt;p&gt;The survey has 16 questions and should take less than 5 minutes to complete. It would great to have as many Eclipse community members as possible to answer ‘&lt;a href=&quot;https://www.surveymonkey.com/r/EclipseFdn&quot;&gt;What is Eclipse?&lt;/a&gt;‘.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Survey 1&quot; class=&quot;alignnone size-full wp-image-4071&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/eclipse-survey-1.png?w=450&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4063/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4063/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4063&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/c1JDIou00kE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 05 Apr 2017 17:19:53 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.4.4.AM2 for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.4.4.am2-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/4.4.4.am2-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.4.4.AM2 (Developer Milestone 2) build for Eclipse Neon.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.AM2.html&quot;&gt;JBoss Tools 4.4.4 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.4.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#docker-tools&quot;&gt;&lt;/a&gt;Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;run-image-network-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-image-network-support&quot;&gt;&lt;/a&gt;Run Image Network Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new page has been added to the Docker Run Image Wizard and Docker Run Image Launch configuration that allows
      the end-user to specify the network mode to use.  A user can choose from Default, Bridge, Host, None, Container,
      or Other.  If Container is selected, the user must choose from an active Container to use the same network mode.
      If Other is specified, a named network can be specified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRunConfigNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;refresh-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#refresh-connection&quot;&gt;&lt;/a&gt;Refresh Connection&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users can now refresh the entire connection from the Docker Explorer View.  Refresh can be performed two ways:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;using the right-click context menu from the Connection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using the Refresh menu button when the Connection is selected&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Refresh Connection&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRefreshConnection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      A late problem has been found between Neon.3 packages and Docker Tools packages. It has been fixed since then, but
      you need to install the latest Docker Tools bits from &lt;a class=&quot;bare&quot; href=&quot;http://download.eclipse.org/linuxtools/update-docker-2.3.1&quot;&gt;http://download.eclipse.org/linuxtools/update-docker-2.3.1&lt;/a&gt; if you want
      the best Docker Tools experience with Neon.3.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 05 Apr 2017 10:21:44 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Service Releases of Third Party Content in the Eclipse IP Due Diligence Process</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4752</guid>
	<link>https://waynebeaton.wordpress.com/2017/04/03/service-releases-of-third-party-content-in-the-eclipse-ip-due-diligence-process/</link>
	<description>&lt;p&gt;Some time ago, the Eclipse Foundation’s Board of Directors passed the following resolution.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;RESOLVED&lt;/strong&gt;, that previously approved dependencies of Eclipse projects can be&lt;br /&gt;
reviewed and approved by the EMO as follows:&lt;br /&gt;
a) Service releases (e.g. x.y., bug fixes, security fixes) will require no review.&lt;br /&gt;
b) Minor revisions (e.g. x..) will require a reduced review by the EMO.&lt;br /&gt;
c) Major revisions (e.g. ..) will require a full review by the EMO.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At the time the resolution was passed, it was decided that project teams would still be required to register the use of service releases for third party content with the Eclipse Intellectual Property (IP) team (i.e. create a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;Contribution Questionnaire&lt;/a&gt;); it was decided that the resolution really only impacted how the IP Team would process the content: at least in theory, the IP Team would &lt;em&gt;rubber stamp&lt;/em&gt; requests for service releases. I say &lt;em&gt;in theory&lt;/em&gt;, because the IP Team would still eyeball these requests and sometimes invest some modest effort to ensure that significant new IP hadn’t been introduced.&lt;/p&gt;
&lt;p&gt;We’ve reconsidered this position.&lt;/p&gt;
&lt;p&gt;Project teams are &lt;em&gt;not required&lt;/em&gt; to engage with the Eclipse IP Team to review service releases for third party content, provided that the service release is based on a previously-approved release. This assumes that the providers of the third party content regard service releases in the manner described by Semantic Versioning (i.e. a patch of backwards-compatible bug fixes) and that the service release does not include significant new IP.  Of course, if a project team isn’t sure, they can always just submit the content for review anyway.&lt;/p&gt;
&lt;p&gt;We envision a scenario where project teams will take advantage of this for milestone builds, but then get full approval for final versions of their third party content. This isn’t required, but it is an option that’s available for project teams that feel that it’s necessary.&lt;/p&gt;
&lt;p&gt;For major and minor releases, the manner in which the the project team interacts with the Eclipse IP Team does not change. Note that it is implied that the &lt;em&gt;reduced review&lt;/em&gt; for minor releases follows an approved full review for a corresponding major release and that any service release follows an approved major or minor release.&lt;/p&gt;
&lt;p&gt;For more information, to add your thoughts and concerns, or to track our progress with regard to updating our documentation, add yourself in copy to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=512465&quot;&gt;Bug 512465&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4752/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4752/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4752&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 20:59:10 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation at Devoxx France</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</link>
	<description>Devoxx France takes place in Paris on April 5-7, 2017. Be sure to register today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/QLHE8hQxik0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:05 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Introducing Eclipse Toolmaker's Day</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</link>
	<description>Created for the tools developer community, Eclipse Toolmaker's Day takes place on Wed April 26 2017 in Budapest, Hungary.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/csMRaO1ijvg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:00 +0000</pubDate>
</item>

</channel>
</rss>
